[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
call ddc#custom#patch_global('autoCompleteEvents', [
  \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
  \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
  \ ])
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('sources', ['lsp', 'around', 'file', 'neosnippet'])
call ddc#custom#patch_global('cmdlineSources', {
 \ ':': ['cmdline_history', 'cmdline', 'around'],
 \ '@': ['input', 'cmdline'],
 \ '>': ['cmdline_history', 'input', 'file', 'around'],
 \ '/': ['around', 'line'],
 \ '?': ['around', 'line'],
 \ '-': ['around', 'line'],
 \ '=': ['input'],
 \ })
call ddc#custom#patch_global('sourceParams', {
  \ 'lsp': {
  \   'lspEngine': 'vim-lsp',
  \   'snippetEngine': denops#callback#register({
  \      body -> vsnip#anonymous(body)
  \    }),
  \    'enableResolveItem': v:true,
  \    'enableAdditionalTextEdit': v:true,
  \    'enableDisplayDetail': v:true,
  \ }
  \ })
call ddc#custom#patch_global('sourceOptions', {
  \   '_': {
  \     'matchers': ['matcher_fuzzy'],
  \     'sorters': ['sorter_fuzzy'],
  \     'converters': ['converter_fuzzy'],
  \     'ignoreCase': v:true,
  \     'keywordPattern': '[a-zA-Z_:]\w*',
  \   },
  \   'lsp': {
  \     'mark': 'lsp',
  \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
  \     'sorters': ['sorter_lsp-kind'],
  \     'isVolatile': v:true,
  \     'dup': v:true,
  \   },
  \   'neosnippet': {
  \     'mark': 'ns',
  \     'dup': v:true
  \   },
  \   'around': {
  \     'mark': 'A',
  \     'matchers': ['matcher_head'],
  \     'minAutoCompleteLength': 4,
  \   },
  \   'cmdline': {
  \    'mark': 'cmdline',
  \    'forceCompletionPattern': '\S/\S*',
  \    'dup': v:true,
  \   },
  \   'input': {
  \     'mark': 'input',
  \     'forceCompletionPattern': '\S/\S*',
  \     'isVolatile': v:true,
  \     'dup': v:true,
  \   },
  \   'file': {
  \     'mark': 'F',
  \     'isVolatile': v:true,
  \     'minAutoCompleteLength': 1000,
  \     'forceCompletionPattern': '\S/\S*'
  \   },
  \   'cmdline_history': {
  \    'mark': 'h',
  \    'sorters': [],
  \   },
  \ })
call ddc#custom#patch_global('filterParams', {
  \   'converter_fuzzy': {
  \     'hlGroup': 'SpellBad'
  \   },
  \   'matcher_fuzzy': {
  \     'splitMode': 'word'
  \   }
  \ })
call ddc#custom#patch_filetype(['FineCmdlinePrompt'], {
  \ 'keywordPattern': '[0-9a-zA-Z_:#]*',
  \ 'sources': ['cmdline_history', 'cmdline', 'around'],
  \ 'specialBufferCompletion': v:true,
  \})

" For insert mode completion
inoremap <silent><expr> <TAB>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1, "empty")<CR>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1, "empty")<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
inoremap <expr> <C-e> pum#visible()
      \ ? '<Cmd>call pum#map#cancel()<CR>'
      \ : '<End>'
imap <expr><CR>
  \ neosnippet#expandable_or_jumpable() ? '<Plug>(neosnippet_expand_or_jump)' :
  \ pum#entered() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'

" For command line mode completion
cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ?
  \ ddc#map#manual_complete() : nr2char(&wildcharm)
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
cnoremap <C-c>   <Cmd>call pum#map#cancel()<CR>
cnoremap <C-o>   <Cmd>call pum#map#confirm()<CR>

call ddc#enable({'context_filetipe': 'none'})
'''
hook_post_update = '''
call ddc#set_static_import_path()
'''
hook_add = '''
nnoremap :       <Cmd>call CommandlinePre(':')<CR>:
nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?

function! CommandlinePre(mode) abort
  " Note: It disables default command line completion!
  let b:prev_buffer_config = ddc#custom#get_buffer()

  cnoremap <expr><buffer> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ?
  \ ddc#map#manual_complete() : "\<C-t>"

  if a:mode ==# ':'
    call ddc#custom#patch_buffer('sourceOptions', #{
          \   _: #{
          \     keywordPattern: '[0-9a-zA-Z_:#-]*',
          \   },
          \ })

    " Use zsh source for :! completion
    call ddc#custom#set_context_buffer({ ->
          \ getcmdline()->stridx('!') ==# 0 ? {
          \   'cmdlineSources': [
          \     'cmdline', 'cmdline_history', 'around',
          \   ],
          \ } : {} })
  endif
  autocmd vimrc User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  silent! cunmap <buffer> <Tab>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  endif
endfunction

'''

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline_history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-none'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
call ddc#custom#patch_filetype(
  \ ['vim'], 'sources', has('nvim') ?
  \ ['necovim', 'around', 'deoppet', 'file'] :
  \ ['necovim', 'around', 'neosnippet', 'file']
  \ )
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
call pum#set_option({
  \ 'auto_confirm_time': 0,
  \ 'auto_select': v:false,
  \ 'border': 'none',
  \ 'commit_characters': ['.'],
  \ 'highlight_scrollbar': 'None',
  \ 'max_width': 80,
  \ 'offset_cmdcol': 0,
  \ 'padding': v:false,
  \ 'preview': v:true,
  \ 'preview_width': 80,
  \ 'reversed': v:false,
  \ 'use_setline': v:false,
  \ })
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

# [[plugins]]
# repo = 'matsui54/denops-signature_help'
# on_source = 'ddc.vim'
# hook_source = '''
# let g:signature_help_config = {
#   \   'style': 'virtual',
#   \ }
# call signature_help#enable()
# let g:lsp_signature_help_enabled = 0
# '''

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
