[[plugins]]
repo = 'Aixile/tjs.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
if = '''!has('nvim')'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = ['neosnippet.vim']

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
if = '''has('python')'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'heavenshell/vim-quickrun-hook-unittest'
depends = ['vim-quickrun']

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [
\     ['mode', 'paste'],
\     ['fugitive', 'gitgutter', 'filename', 'method'],
\   ],
\   'right': [
\     ['lineinfo', 'syntastic'],
\     ['percent'],
\     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
\   ]
\ },
\ 'component_function': {
\   'modified': 'MyModified',
\   'readonly': 'MyReadonly',
\   'fugitive': 'MyFugitive',
\   'filename': 'MyFilename',
\   'fileformat': 'MyFileformat',
\   'filetype': 'MyFiletype',
\   'fileencoding': 'MyFileencoding',
\   'mode': 'MyMode',
\   'syntastic': 'SyntasticStatuslineFlag',
\   'charcode': 'MyCharCode',
\   'gitgutter': 'MyGitGutter',
\   'method' : 'MyMethod',
\ },
\ 'separator': { 'left': "\ue0c0", 'right': "\ue0c2" },
\ 'subseparator': { 'left': "\ue0c1", 'right': "\ue0c3" }
\ }


function! MyModified()
  return &ft =~? 'help\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|gundo' && &ro ? '\u2b64' : ''
endfunction

function! MyFilename()
  return ('' !=? MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ( &ft ==? 'unite' ? unite#get_status_string() :
        \  &ft ==? 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' !=? expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' !=? MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'gundo' && exists('*fugitive#head')
      let l:_ = fugitive#head()
      return strlen(l:_) ? '⭠ '. l:_ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let l:symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let l:hunks = GitGutterGetHunkSummary()
  let l:ret = []
  for l:i in [0, 1, 2]
    if l:hunks[l:i] > 0
      call add(l:ret, l:symbols[l:i] . l:hunks[l:i])
    endif
  endfor
  return join(l:ret, ' ')
endfunction

function MyMethod()
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
'''

[[plugins]]
repo = 'kamichidu/vim-ref-java'
depends = ['wwwrenderer-vim']

[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'kana/vim-textobj-function'

[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
call textobj#user#plugin('datetime', {
\   'date': {
\     'pattern': '\<\d\d\d\d-\d\d-\d\d\>',
\     'select': ['ad', 'id'],
\   },
\   'time': {
\     'pattern': '\<\d\d:\d\d:\d\d\>',
\     'select': ['at', 'it'],
\   },
\ })
'''


[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/fern-bookmark.vim'
depends = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-comparator-lexical.vim'
depends = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'
depends = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-mapping-git.vim'
depends = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = ['nerdfont.vim']

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
hook_add = '''
let g:nerdfont#path#extension#customs = {
  \ 'vue': '󿵂',
  \ 'node': '󿢘',
  \ 'rtf': '󿜘',
  \ 'license': '󿜘'
  \ }
'''

[[plugins]]
repo = 'lambdalisue/vim-unified-diff'
hook_add = '''
set diffexpr=unified_diff#diffexpr()

" configure with the followings (default values are shown below)
let g:unified_diff#executable = 'git'
let g:unified_diff#arguments = [
\   'diff', '--no-index', '--no-color', '--no-ext-diff', '--unified=0',
\ ]
let g:unified_diff#iwhite_arguments = [
\   '--ignore--all-space',
\ ]
'''

[[plugins]]
repo = 'machakann/vim-swap'

[[plugins]]
repo = 'mattn/libcallex-vim'

[[plugins]]
repo = 'mattn/vim-findroot'

[[plugins]]
repo = 'mattn/vim-lsp-icons'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings = {
  \ 'gopls': {
  \   'capabilities': {
  \     'textDocument': {
  \       'completion': {
  \         'completionItem': {
  \           'documentationFormat': ['markdown', 'plaintext'],
  \           'snippetSupport': v:true,
  \           'commitCharactersSupport': v:true,
  \           'deprecatedSupport': v:true,
  \           'preselectSupport': v:true,
  \           'tagSupport': {'valueSet': [1]},
  \           'insertReplaceSupport': v:true,
  \           'resolveSupport': {
  \             'properties': [
  \               'documentation',
  \               'detail',
  \               'additionalTextEdits',
  \               'insertText',
  \               'textEdit',
  \               'insertTextFormat',
  \               'insertTextMode',
  \             ],
  \           },
  \           'insertTextModeSupport': {'valueSet': [1, 2]},
  \           'labelDetailsSupport': v:true,
  \         },
  \         'contextSupport': v:true,
  \         'insertTextMode': 1,
  \         'completionList': {'itemDefaults': ['commitCharacters', 'editRange', 'insertTextFormat', 'insertTextMode', 'data']},
  \         'completionItemKind': {'valueSet': [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9]},
  \         'dynamicRegistration': v:false,
  \       },
  \     },
  \   },
  \ },
  \ 'efm-langserver': {'disabled': v:false},
  \}
'''

[[plugins]]
repo = 'mattn/vim-notification'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'miyakogi/conoline.vim'
hook_add = '''
let g:conoline_auto_enable = 1
'''

[[plugins]]
repo = 'osyo-manga/quickrun-hook-u-nya-'
depends = ['vim-quickrun']

[[plugins]]
repo = 'osyo-manga/quickrun-hook-vcvarsall'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'osyo-manga/vim-over'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add='''
" カーソル移動時の自動切り替えを無効化
let g:precious_enable_switch_CursorMoved = {
  \ "vue" : 0
  \ }
let g:precious_enable_switch_CursorMoved_i = {
  \ "vue" : 0
  \ }
'''

[[plugins]]
repo = 'osyo-manga/vim-reunions'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['vim-quickrun']
hook_source = '''
let g:watchdogs_check_BufWritePost_enable = 1
let g:watchdogs_check_BufWritePost_enables = {
  \   'cpp' : 0,
  \   'php' : 1,
  \ }
let g:watchdogs_check_CursorHold_enable = 1
let g:watchdogs_check_CursorHold_enables = {
  \   'cpp' : 0,
  \   'php' : 1,
  \ }
call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
depends = ['typescript-vim']

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}

let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')
'''

[[plugins]]
repo = 'previm/previm'
hook_add='''
let g:previm_extra_libraries = [
\  {
\    'name': 'katex',
\    'files': [
\      {
\        'type': 'css',
\        'path': '_/js/extra/texmath.min.css',
\        'url': 'https://cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css',
\      },
\      {
\        'type': 'css',
\        'path': '_/css/extra/katex.min.css',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css',
\        'code': [
\          'renderMathInElement(document.body)',
\        ],
\      },
\      {
\        'type': 'js',
\        'path': '_/js/extra/katex-auto-render.min.js',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/contrib/auto-render.min.js',
\        'code': [
\          'renderMathInElement(document.body)',
\        ],
\      },
\      {
\        'type': 'js',
\        'path': '_/js/extra/katex.min.js',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.js',
\        'code': [
\          'document.querySelectorAll(''pre code.language-katex'').forEach(elem => {',
\          '  const html = katex.renderToString(elem.innerText, {',
\          '    displayMode: true,',
\          '    output: ''html'',',
\          '    throwOnError: false,',
\          '  })',
\          '  const span = document.createElement(''span'')',
\          '  span.innerHTML = html',
\          '  elem.parentNode.replaceWith(span)',
\          '})',
\          'document.querySelectorAll(''.inlkatex'').forEach(elem => {',
\          '  const html = katex.renderToString(elem.innerText, {',
\          '    output: ''html'',',
\          '    throwOnError: false,',
\          '  })',
\          '  const span = document.createElement(''span'')',
\          '  span.innerHTML = html',
\          '  elem.replaceWith(span)',
\          '})',
\        ],
\      },
\    ],
\  },
\]
'''

[[plugins]]
repo = 'raa0121/vim-ulilith'

[[plugins]]
repo = 'rbtnn/game_engine.vim'

[[plugins]]
repo = 'rhysd/try-colorscheme.vim'

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}
let g:quickrun_config = {
  \ '_' : {
    \ 'hook/close_unite_quickfix/enable_hook_loaded' : 1,
    \ 'hook/unite_quickfix/enable_failure' : 1,
    \ 'hook/close_quickfix/enable_exit' : 1,
    \ 'hook/close_buffer/enable_failure' : 1,
    \ 'hook/close_buffer/enable_empty_data' : 1,
    \ 'outputter' : 'multi:buffer:quickfix',
    \ 'hook/u_nya_/enable' : 1,
    \ 'hook/sweep/enable' : 0,
    \ 'outputter/buffer/split' : ':botright 15sp',
    \ 'outputter/buffer/running_mark' : 'ﾊﾞﾝ（∩`･ω･）ﾊﾞﾝﾊﾞﾝﾊﾞﾝﾊﾞﾝﾞﾝ',
    \ 'runner' : 'vimproc',
    \ 'runner/vimproc/updatetime' : 40,
    \ 'runner/vimproc/sleep' : 0,
  \ }
\ }

let g:quickrun_config['markdown'] = {
  \ 'outputter': 'browser'
  \}
let g:quickrun_config['ruby'] = {
  \ 'command': 'ruby',
  \ 'exec': '/usr/bin/env ruby %s',
  \ 'tempfile': '{tempname()}.rb'
  \}
let g:quickrun_config['clojure/neoclojure'] = {
  \ 'type' : 'clojure/neoclojure',
  \ 'runner' : 'neoclojure',
  \ 'command' : 'dummy',
  \ 'tempfile' : '%{tempname()}.clj'
  \}
let g:quickrun_config['cpp/gcc']= {
  \ 'cmdopt': '-std=c++1y -Wall'
  \ }
'''

[[plugins]]
repo = 'thinca/vim-singleton'
hook_add = '''
if has('clientserver')
  call singleton#enable()
endif
'''

[[plugins]]
repo = 'thinca/vim-splash'
hook_add = '''
let g:loaded_splash = 1
'''

[[plugins]]
repo = 'thosakwe/vim-flutter'

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = ['vim-lsp']

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'tyru/kirikiri.vim'

[[plugins]]
repo = 'ujihisa/neco-look'
if = '''executable('look')'''

[[plugins]]
repo = 'yaasita/slack.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
let g:denops#server#service#deno_args = [
\ '-q',
\ '--unstable',
\ '-A',
\]
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'voldikss/vim-floaterm'
hook_add = '''
nnoremap   <silent>   <F7>    :FloatermNew<CR>
tnoremap   <silent>   <F7>    <C-\><C-n>:FloatermNew<CR>
nnoremap   <silent>   <F8>    :FloatermPrev<CR>
tnoremap   <silent>   <F8>    <C-\><C-n>:FloatermPrev<CR>
nnoremap   <silent>   <F9>    :FloatermNext<CR>
tnoremap   <silent>   <F9>    <C-\><C-n>:FloatermNext<CR>
tnoremap   <silent>   <F10>   <C-W>"\"
tnoremap   <silent>   <F11>   <C-W>N
nnoremap   <silent>   <F12>   :FloatermToggle<CR>
tnoremap   <silent>   <F12>   <C-\><C-n>:FloatermToggle<CR>
augroup my-floaterm
  autocmd!
  autocmd User FloatermOpen nnoremap <buffer> <nowait> <F10> a
augroup END
'''
