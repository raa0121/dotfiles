[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
inoremap <silent><expr> <C-l> ddc#complete_common_string()
inoremap <silent><expr> <C-x><C-f> ddc#map#manual_complete('path')
inoremap <silent><expr> <TAB>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
"imap <expr><CR>
"  \ neosnippet#expandable_or_jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<CR>'
imap <expr><CR>
  \ neosnippet#expandable_or_jumpable() ? '<Plug>(neosnippet_expand_or_jump)' :
  \ pum#entered() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'

call ddc#custom#patch_global('autoCompleteEvents', [
  \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
  \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
  \ ])
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('sources', ['lsp', 'around', 'file', 'neosnippet'])
call ddc#custom#patch_global('cmdlineSources', {
 \ ':': ['cmdline-history', 'cmdline', 'around'],
 \ '@': ['input', 'cmdline'],
 \ '>': ['cmdline-history', 'input', 'file', 'around'],
 \ '/': ['around', 'line'],
 \ '?': ['around', 'line'],
 \ '-': ['around', 'line'],
 \ '=': ['input'],
 \ })
call ddc#custom#patch_global('sourceParams', {
  \ 'lsp': {
  \   'lspEngine': 'vim-lsp',
  \   'snippetEngine': denops#callback#register({
  \      body -> vsnip#anonymous(body)
  \    }),
  \    'enableResolveItem': v:true,
  \    'enableAdditionalTextEdit': v:true,
  \    'enableDisplayDetail': v:true,
  \ }
  \ })
call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
  \   'matchers': ['matcher_fuzzy'],
  \   'sorters': ['sorter_fuzzy'],
  \   'converters': ['converter_fuzzy'],
  \   'ignoreCase': v:true,
  \   'keywordPattern': '[a-zA-Z_:]\w*',
  \ },
  \ 'lsp': {
  \   'mark': 'lsp',
  \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
  \   'sorters': ['sorter_lsp-kind'],
  \   'isVolatile': v:true,
  \   'dup': v:true,
  \ },
  \ 'neosnippet': {
  \   'mark': 'ns',
  \   'dup': v:true
  \ },
  \ 'around': {
  \   'mark': 'A',
  \   'matchers': ['matcher_head'],
  \   'minAutoCompleteLength': 4,
  \ },
  \ 'cmdline': {
  \  'mark': 'cmdline',
  \  'forceCompletionPattern': '\S/\S*',
  \  'dup': v:true,
  \ },
  \ 'input': {
  \   'mark': 'input',
  \   'forceCompletionPattern': '\S/\S*',
  \   'isVolatile': v:true,
  \   'dup': v:true,
  \ },
  \ 'file': {
  \   'mark': 'F',
  \   'isVolatile': v:true,
  \   'minAutoCompleteLength': 1000,
  \   'forceCompletionPattern': '\S/\S*'
  \ },
  \ 'cmdline-history': {
  \  'mark': 'h',
  \  'sorters': [],
  \ },
  \})
call ddc#custom#patch_global('filterParams', {
  \   'converter_fuzzy': {
  \     'hlGroup': 'SpellBad'
  \   },
  \   'matcher_fuzzy': {
  \     'splitMode': 'word'
  \   }
  \ })
call ddc#custom#patch_filetype(['FineCmdlinePrompt'], {
  \ 'keywordPattern': '[0-9a-zA-Z_:#]*',
  \ 'sources': ['cmdline-history', 'cmdline', 'around'],
  \ 'specialBufferCompletion': v:true,
  \})

" For insert mode completion
inoremap <silent><expr> <TAB>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1, "empty")<CR>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1, "empty")<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
inoremap <silent><expr> <C-l>   ddc#map#extend()

" For command line mode completion
cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ?
  \ ddc#map#manual_complete() : nr2char(&wildcharm)
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
cnoremap <C-c>   <Cmd>call pum#map#cancel()<CR>
cnoremap <C-o>   <Cmd>call pum#map#confirm()<CR>

call ddc#enable()
'''
hook_add = '''
nnoremap :       <Cmd>call CommandlinePre(':')<CR>:
nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?

function! CommandlinePre(mode) abort
  " Note: It disables default command line completion!
  set wildchar=<C-t>
  set wildcharm=<C-t>

  cnoremap <expr><buffer> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ?
  \ ddc#map#manual_complete() : "\<C-t>"

  " Overwrite sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  endif
  if a:mode ==# ':'
    call ddc#custom#patch_buffer('cmdlineSources',
      \ ['cmdline', 'cmdline-history', 'around', 'file'])
    call ddc#custom#patch_buffer('sourceOptions', {
      \ '_': {
      \  'keywordPattern': '[0-9a-zA-Z_:#]*',
      \ }
      \})
  else
    call ddc#custom#patch_buffer('cmdlineSources',
      \ ['around', 'line'])
  endif

  autocmd vimrc User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd vimrc InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  silent! cunmap <buffer> <Tab>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif

  set wildchar=<Tab>
endfunction

'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-none'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
call ddc#custom#patch_filetype(
  \ ['vim'], 'sources', has('nvim') ?
  \ ['necovim', 'around', 'deoppet', 'file'] :
  \ ['necovim', 'around', 'neosnippet', 'file']
  \ )
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
call pum#set_option('max_width', 80)
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
let g:signature_help_config = {
  \   'style': 'virtual',
  \ }
call signature_help#enable()
let g:lsp_signature_help_enabled = 0
'''

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
